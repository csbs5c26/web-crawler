#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18213
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebCrawlerService.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\Users\\Daniel\\AppData\\Local\\Temp\\movies.sdf")]
	public partial class MoviesContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCaptions(Captions instance);
    partial void UpdateCaptions(Captions instance);
    partial void DeleteCaptions(Captions instance);
    partial void InsertMovieProviders(MovieProviders instance);
    partial void UpdateMovieProviders(MovieProviders instance);
    partial void DeleteMovieProviders(MovieProviders instance);
    partial void InsertMovies(Movies instance);
    partial void UpdateMovies(Movies instance);
    partial void DeleteMovies(Movies instance);
    partial void InsertMovieStreamSet(MovieStreamSet instance);
    partial void UpdateMovieStreamSet(MovieStreamSet instance);
    partial void DeleteMovieStreamSet(MovieStreamSet instance);
    partial void InsertStreamCookie(StreamCookie instance);
    partial void UpdateStreamCookie(StreamCookie instance);
    partial void DeleteStreamCookie(StreamCookie instance);
    partial void InsertStreamHeaders(StreamHeaders instance);
    partial void UpdateStreamHeaders(StreamHeaders instance);
    partial void DeleteStreamHeaders(StreamHeaders instance);
    partial void InsertVideoStream(VideoStream instance);
    partial void UpdateVideoStream(VideoStream instance);
    partial void DeleteVideoStream(VideoStream instance);
    #endregion
		
		public MoviesContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Captions> Captions
		{
			get
			{
				return this.GetTable<Captions>();
			}
		}
		
		public System.Data.Linq.Table<MovieProviders> MovieProviders
		{
			get
			{
				return this.GetTable<MovieProviders>();
			}
		}
		
		public System.Data.Linq.Table<Movies> Movies
		{
			get
			{
				return this.GetTable<Movies>();
			}
		}
		
		public System.Data.Linq.Table<MovieStreamSet> MovieStreamSet
		{
			get
			{
				return this.GetTable<MovieStreamSet>();
			}
		}
		
		public System.Data.Linq.Table<StreamCookie> StreamCookie
		{
			get
			{
				return this.GetTable<StreamCookie>();
			}
		}
		
		public System.Data.Linq.Table<StreamHeaders> StreamHeaders
		{
			get
			{
				return this.GetTable<StreamHeaders>();
			}
		}
		
		public System.Data.Linq.Table<VideoStream> VideoStream
		{
			get
			{
				return this.GetTable<VideoStream>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Captions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StreamSetId;
		
		private string _Language;
		
		private string _Address;
		
		private EntityRef<MovieStreamSet> _MovieStreamSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStreamSetIdChanging(int value);
    partial void OnStreamSetIdChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Captions()
		{
			this._MovieStreamSet = default(EntityRef<MovieStreamSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamSetId", DbType="Int NOT NULL")]
		public int StreamSetId
		{
			get
			{
				return this._StreamSetId;
			}
			set
			{
				if ((this._StreamSetId != value))
				{
					if (this._MovieStreamSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreamSetIdChanging(value);
					this.SendPropertyChanging();
					this._StreamSetId = value;
					this.SendPropertyChanged("StreamSetId");
					this.OnStreamSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(25)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Captions_StreamSetId", Storage="_MovieStreamSet", ThisKey="StreamSetId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public MovieStreamSet MovieStreamSet
		{
			get
			{
				return this._MovieStreamSet.Entity;
			}
			set
			{
				MovieStreamSet previousValue = this._MovieStreamSet.Entity;
				if (((previousValue != value) 
							|| (this._MovieStreamSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieStreamSet.Entity = null;
						previousValue.Captions.Remove(this);
					}
					this._MovieStreamSet.Entity = value;
					if ((value != null))
					{
						value.Captions.Add(this);
						this._StreamSetId = value.Id;
					}
					else
					{
						this._StreamSetId = default(int);
					}
					this.SendPropertyChanged("MovieStreamSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class MovieProviders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsEnabled;
		
		private int _RefreshHours;
		
		private System.Nullable<System.DateTime> _LastRunDate;
		
		private byte _LastPageProcessed;
		
		private string _LastMovieTitleProcessed;
		
		private EntitySet<Movies> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnRefreshHoursChanging(int value);
    partial void OnRefreshHoursChanged();
    partial void OnLastRunDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRunDateChanged();
    partial void OnLastPageProcessedChanging(byte value);
    partial void OnLastPageProcessedChanged();
    partial void OnLastMovieTitleProcessedChanging(string value);
    partial void OnLastMovieTitleProcessedChanged();
    #endregion
		
		public MovieProviders()
		{
			this._Movies = new EntitySet<Movies>(new Action<Movies>(this.attach_Movies), new Action<Movies>(this.detach_Movies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefreshHours", DbType="Int NOT NULL")]
		public int RefreshHours
		{
			get
			{
				return this._RefreshHours;
			}
			set
			{
				if ((this._RefreshHours != value))
				{
					this.OnRefreshHoursChanging(value);
					this.SendPropertyChanging();
					this._RefreshHours = value;
					this.SendPropertyChanged("RefreshHours");
					this.OnRefreshHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRunDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastRunDate
		{
			get
			{
				return this._LastRunDate;
			}
			set
			{
				if ((this._LastRunDate != value))
				{
					this.OnLastRunDateChanging(value);
					this.SendPropertyChanging();
					this._LastRunDate = value;
					this.SendPropertyChanged("LastRunDate");
					this.OnLastRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPageProcessed", DbType="TinyInt NOT NULL")]
		public byte LastPageProcessed
		{
			get
			{
				return this._LastPageProcessed;
			}
			set
			{
				if ((this._LastPageProcessed != value))
				{
					this.OnLastPageProcessedChanging(value);
					this.SendPropertyChanging();
					this._LastPageProcessed = value;
					this.SendPropertyChanged("LastPageProcessed");
					this.OnLastPageProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastMovieTitleProcessed", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastMovieTitleProcessed
		{
			get
			{
				return this._LastMovieTitleProcessed;
			}
			set
			{
				if ((this._LastMovieTitleProcessed != value))
				{
					this.OnLastMovieTitleProcessedChanging(value);
					this.SendPropertyChanging();
					this._LastMovieTitleProcessed = value;
					this.SendPropertyChanged("LastMovieTitleProcessed");
					this.OnLastMovieTitleProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Movies_ProviderId", Storage="_Movies", ThisKey="Id", OtherKey="ProviderId", DeleteRule="NO ACTION")]
		public EntitySet<Movies> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movies entity)
		{
			this.SendPropertyChanging();
			entity.MovieProviders = this;
		}
		
		private void detach_Movies(Movies entity)
		{
			this.SendPropertyChanging();
			entity.MovieProviders = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Movies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProviderId;
		
		private string _Title;
		
		private System.Nullable<int> _Year;
		
		private string _Description;
		
		private string _Link;
		
		private int _Genres;
		
		private string _Cover;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<MovieProviders> _MovieProviders;
		
		private EntitySet<MovieStreamSet> _MovieStreamSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProviderIdChanging(int value);
    partial void OnProviderIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnGenresChanging(int value);
    partial void OnGenresChanged();
    partial void OnCoverChanging(string value);
    partial void OnCoverChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Movies()
		{
			this._MovieProviders = default(EntityRef<MovieProviders>);
			this._MovieStreamSet = new EntitySet<MovieStreamSet>(new Action<MovieStreamSet>(this.attach_MovieStreamSet), new Action<MovieStreamSet>(this.detach_MovieStreamSet));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderId", DbType="Int NOT NULL")]
		public int ProviderId
		{
			get
			{
				return this._ProviderId;
			}
			set
			{
				if ((this._ProviderId != value))
				{
					if (this._MovieProviders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderId = value;
					this.SendPropertyChanged("ProviderId");
					this.OnProviderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genres", DbType="Int NOT NULL")]
		public int Genres
		{
			get
			{
				return this._Genres;
			}
			set
			{
				if ((this._Genres != value))
				{
					this.OnGenresChanging(value);
					this.SendPropertyChanging();
					this._Genres = value;
					this.SendPropertyChanged("Genres");
					this.OnGenresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cover", DbType="NVarChar(1024)")]
		public string Cover
		{
			get
			{
				return this._Cover;
			}
			set
			{
				if ((this._Cover != value))
				{
					this.OnCoverChanging(value);
					this.SendPropertyChanging();
					this._Cover = value;
					this.SendPropertyChanged("Cover");
					this.OnCoverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Movies_ProviderId", Storage="_MovieProviders", ThisKey="ProviderId", OtherKey="Id", IsForeignKey=true)]
		public MovieProviders MovieProviders
		{
			get
			{
				return this._MovieProviders.Entity;
			}
			set
			{
				MovieProviders previousValue = this._MovieProviders.Entity;
				if (((previousValue != value) 
							|| (this._MovieProviders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieProviders.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._MovieProviders.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._ProviderId = value.Id;
					}
					else
					{
						this._ProviderId = default(int);
					}
					this.SendPropertyChanged("MovieProviders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MovieStreamSet_MovieId", Storage="_MovieStreamSet", ThisKey="Id", OtherKey="MovieId", DeleteRule="CASCADE")]
		public EntitySet<MovieStreamSet> MovieStreamSet
		{
			get
			{
				return this._MovieStreamSet;
			}
			set
			{
				this._MovieStreamSet.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieStreamSet(MovieStreamSet entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_MovieStreamSet(MovieStreamSet entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class MovieStreamSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MovieId;
		
		private string _AddressSource;
		
		private EntitySet<Captions> _Captions;
		
		private EntityRef<Movies> _Movies;
		
		private EntitySet<StreamHeaders> _StreamHeaders;
		
		private EntitySet<StreamCookie> _StreamCookie;
		
		private EntitySet<VideoStream> _VideoStream;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMovieIdChanging(int value);
    partial void OnMovieIdChanged();
    partial void OnAddressSourceChanging(string value);
    partial void OnAddressSourceChanged();
    #endregion
		
		public MovieStreamSet()
		{
			this._Captions = new EntitySet<Captions>(new Action<Captions>(this.attach_Captions), new Action<Captions>(this.detach_Captions));
			this._Movies = default(EntityRef<Movies>);
			this._StreamHeaders = new EntitySet<StreamHeaders>(new Action<StreamHeaders>(this.attach_StreamHeaders), new Action<StreamHeaders>(this.detach_StreamHeaders));
			this._StreamCookie = new EntitySet<StreamCookie>(new Action<StreamCookie>(this.attach_StreamCookie), new Action<StreamCookie>(this.detach_StreamCookie));
			this._VideoStream = new EntitySet<VideoStream>(new Action<VideoStream>(this.attach_VideoStream), new Action<VideoStream>(this.detach_VideoStream));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieId", DbType="Int NOT NULL")]
		public int MovieId
		{
			get
			{
				return this._MovieId;
			}
			set
			{
				if ((this._MovieId != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIdChanging(value);
					this.SendPropertyChanging();
					this._MovieId = value;
					this.SendPropertyChanged("MovieId");
					this.OnMovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressSource", DbType="NVarChar(1024)")]
		public string AddressSource
		{
			get
			{
				return this._AddressSource;
			}
			set
			{
				if ((this._AddressSource != value))
				{
					this.OnAddressSourceChanging(value);
					this.SendPropertyChanging();
					this._AddressSource = value;
					this.SendPropertyChanged("AddressSource");
					this.OnAddressSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Captions_StreamSetId", Storage="_Captions", ThisKey="Id", OtherKey="StreamSetId", DeleteRule="CASCADE")]
		public EntitySet<Captions> Captions
		{
			get
			{
				return this._Captions;
			}
			set
			{
				this._Captions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MovieStreamSet_MovieId", Storage="_Movies", ThisKey="MovieId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.MovieStreamSet.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.MovieStreamSet.Add(this);
						this._MovieId = value.Id;
					}
					else
					{
						this._MovieId = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MovieStreamSet_StreamSetId", Storage="_StreamHeaders", ThisKey="Id", OtherKey="StreamSetId", DeleteRule="CASCADE")]
		public EntitySet<StreamHeaders> StreamHeaders
		{
			get
			{
				return this._StreamHeaders;
			}
			set
			{
				this._StreamHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_StreamCookie_StreamSetId", Storage="_StreamCookie", ThisKey="Id", OtherKey="StreamSetId", DeleteRule="CASCADE")]
		public EntitySet<StreamCookie> StreamCookie
		{
			get
			{
				return this._StreamCookie;
			}
			set
			{
				this._StreamCookie.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VideoStream_StreamSetId", Storage="_VideoStream", ThisKey="Id", OtherKey="StreamSetId", DeleteRule="CASCADE")]
		public EntitySet<VideoStream> VideoStream
		{
			get
			{
				return this._VideoStream;
			}
			set
			{
				this._VideoStream.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Captions(Captions entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = this;
		}
		
		private void detach_Captions(Captions entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = null;
		}
		
		private void attach_StreamHeaders(StreamHeaders entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = this;
		}
		
		private void detach_StreamHeaders(StreamHeaders entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = null;
		}
		
		private void attach_StreamCookie(StreamCookie entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = this;
		}
		
		private void detach_StreamCookie(StreamCookie entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = null;
		}
		
		private void attach_VideoStream(VideoStream entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = this;
		}
		
		private void detach_VideoStream(VideoStream entity)
		{
			this.SendPropertyChanging();
			entity.MovieStreamSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class StreamCookie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StreamSetId;
		
		private System.Data.Linq.Binary _Value;
		
		private System.DateTime _ExpirationDate;
		
		private EntityRef<MovieStreamSet> _MovieStreamSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStreamSetIdChanging(int value);
    partial void OnStreamSetIdChanged();
    partial void OnValueChanging(System.Data.Linq.Binary value);
    partial void OnValueChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    #endregion
		
		public StreamCookie()
		{
			this._MovieStreamSet = default(EntityRef<MovieStreamSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamSetId", DbType="Int NOT NULL")]
		public int StreamSetId
		{
			get
			{
				return this._StreamSetId;
			}
			set
			{
				if ((this._StreamSetId != value))
				{
					if (this._MovieStreamSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreamSetIdChanging(value);
					this.SendPropertyChanging();
					this._StreamSetId = value;
					this.SendPropertyChanged("StreamSetId");
					this.OnStreamSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarBinary(8000) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_StreamCookie_StreamSetId", Storage="_MovieStreamSet", ThisKey="StreamSetId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public MovieStreamSet MovieStreamSet
		{
			get
			{
				return this._MovieStreamSet.Entity;
			}
			set
			{
				MovieStreamSet previousValue = this._MovieStreamSet.Entity;
				if (((previousValue != value) 
							|| (this._MovieStreamSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieStreamSet.Entity = null;
						previousValue.StreamCookie.Remove(this);
					}
					this._MovieStreamSet.Entity = value;
					if ((value != null))
					{
						value.StreamCookie.Add(this);
						this._StreamSetId = value.Id;
					}
					else
					{
						this._StreamSetId = default(int);
					}
					this.SendPropertyChanged("MovieStreamSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class StreamHeaders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StreamSetId;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<MovieStreamSet> _MovieStreamSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStreamSetIdChanging(int value);
    partial void OnStreamSetIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public StreamHeaders()
		{
			this._MovieStreamSet = default(EntityRef<MovieStreamSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamSetId", DbType="Int NOT NULL")]
		public int StreamSetId
		{
			get
			{
				return this._StreamSetId;
			}
			set
			{
				if ((this._StreamSetId != value))
				{
					if (this._MovieStreamSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreamSetIdChanging(value);
					this.SendPropertyChanging();
					this._StreamSetId = value;
					this.SendPropertyChanged("StreamSetId");
					this.OnStreamSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MovieStreamSet_StreamSetId", Storage="_MovieStreamSet", ThisKey="StreamSetId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public MovieStreamSet MovieStreamSet
		{
			get
			{
				return this._MovieStreamSet.Entity;
			}
			set
			{
				MovieStreamSet previousValue = this._MovieStreamSet.Entity;
				if (((previousValue != value) 
							|| (this._MovieStreamSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieStreamSet.Entity = null;
						previousValue.StreamHeaders.Remove(this);
					}
					this._MovieStreamSet.Entity = value;
					if ((value != null))
					{
						value.StreamHeaders.Add(this);
						this._StreamSetId = value.Id;
					}
					else
					{
						this._StreamSetId = default(int);
					}
					this.SendPropertyChanged("MovieStreamSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class VideoStream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StreamSetId;
		
		private string _VideoAddress;
		
		private byte _Resolution;
		
		private byte _VideoType;
		
		private EntityRef<MovieStreamSet> _MovieStreamSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStreamSetIdChanging(int value);
    partial void OnStreamSetIdChanged();
    partial void OnVideoAddressChanging(string value);
    partial void OnVideoAddressChanged();
    partial void OnResolutionChanging(byte value);
    partial void OnResolutionChanged();
    partial void OnVideoTypeChanging(byte value);
    partial void OnVideoTypeChanged();
    #endregion
		
		public VideoStream()
		{
			this._MovieStreamSet = default(EntityRef<MovieStreamSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamSetId", DbType="Int NOT NULL")]
		public int StreamSetId
		{
			get
			{
				return this._StreamSetId;
			}
			set
			{
				if ((this._StreamSetId != value))
				{
					if (this._MovieStreamSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreamSetIdChanging(value);
					this.SendPropertyChanging();
					this._StreamSetId = value;
					this.SendPropertyChanged("StreamSetId");
					this.OnStreamSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoAddress", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string VideoAddress
		{
			get
			{
				return this._VideoAddress;
			}
			set
			{
				if ((this._VideoAddress != value))
				{
					this.OnVideoAddressChanging(value);
					this.SendPropertyChanging();
					this._VideoAddress = value;
					this.SendPropertyChanged("VideoAddress");
					this.OnVideoAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resolution", DbType="TinyInt NOT NULL")]
		public byte Resolution
		{
			get
			{
				return this._Resolution;
			}
			set
			{
				if ((this._Resolution != value))
				{
					this.OnResolutionChanging(value);
					this.SendPropertyChanging();
					this._Resolution = value;
					this.SendPropertyChanged("Resolution");
					this.OnResolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoType", DbType="TinyInt NOT NULL")]
		public byte VideoType
		{
			get
			{
				return this._VideoType;
			}
			set
			{
				if ((this._VideoType != value))
				{
					this.OnVideoTypeChanging(value);
					this.SendPropertyChanging();
					this._VideoType = value;
					this.SendPropertyChanged("VideoType");
					this.OnVideoTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VideoStream_StreamSetId", Storage="_MovieStreamSet", ThisKey="StreamSetId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public MovieStreamSet MovieStreamSet
		{
			get
			{
				return this._MovieStreamSet.Entity;
			}
			set
			{
				MovieStreamSet previousValue = this._MovieStreamSet.Entity;
				if (((previousValue != value) 
							|| (this._MovieStreamSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieStreamSet.Entity = null;
						previousValue.VideoStream.Remove(this);
					}
					this._MovieStreamSet.Entity = value;
					if ((value != null))
					{
						value.VideoStream.Add(this);
						this._StreamSetId = value.Id;
					}
					else
					{
						this._StreamSetId = default(int);
					}
					this.SendPropertyChanged("MovieStreamSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
